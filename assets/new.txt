Help me with my React Native project, let me give you some context:

My ProfileStack:
const Stack = createNativeStackNavigator();

export default function ProfileStack() {
  return (
    <Stack.Navigator
      initialRouteName="profileStack" // Pantalla inicial
      screenOptions={{
        headerMode: "screen", // Muestra el header en cada pantalla
        headerTintColor: "white", // Color del texto del header
        headerStyle: { backgroundColor: "#BF0AFF" }, // Color del header
      }}
    >
      <Stack.Screen
        name="profileStack" // Nombre de la pantalla
        options={{ title: "Profile" }} // Titulo que se muestra en el header
        component={Profile} // Componente que se renderiza
      />
      <Stack.Screen
        name="userGuestStack"
        options={{ title: "Welcome" }}
        component={UserGuest}
      />
      <Stack.Screen
        name="loginStack"
        options={{ title: "Login" }}
        component={Login}
      />
      <Stack.Screen
        name="createUserStack"
        options={{ title: "Create an account" }}
        component={CreateUser}
      />
    </Stack.Navigator>
  );
}

My Profile.js:
import { StyleSheet } from "react-native";
import React, {useState, useEffect} from "react";
import { reload } from "firebase/auth";
import UserLogged from "../../../user/UserLogged";
import UserGuest from "./UserGuest";
import { useNavigation } from "@react-navigation/native";

export default function Profile() {
  const navigation = useNavigation();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    async () => {
      try {
        const value = await AsyncStorage.getItem("@session");
        if (value !== null) {
          setUser(true);
        } else {
          setUser(false);
        }
      } catch {
        console.log("Error");
      }
    };
  }, [reload]);

  if (user === null) {
    return user ? <UserLogged /> : <UserGuest navigation={navigation} />;
  }
}

const styles = StyleSheet.create({});

Now the thing: I want it so when I press the login button, it logs in with Firebase and then sends the user to the Profile.js, so it can detect if the user is logged.
My Login.js:
export default function Login(props) {
  const { navigation } = props;
  const [error, setError] = useState({ email: "", password: "" }); // useState sirve para manejar el estado de un componente
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(true);
  const [loading, setLoading] = useState(false);
  const auth = getAuth(app);

  const login = () => {
    if (!(isEmpty(email) || isEmpty(password))) {
      setLoading(true);
      setError({ email: "", password: "" });
      signInWithEmailAndPassword(auth, email, password)
        .then(async (userCredential) => {
          // Signed in
          const user = userCredential.user;
          try {
            await AsyncStorage.setItem("@session", JSON.stringify(user));
            // send the user to the profile screen
            navigation.navigate("profileStack");
          } catch (error) {
            console.log(error);
          }
          setLoading(false);
          navigation.navigate("profileStack");
        })
        .catch((error) => {
          setError({
            email: "Email is required",
            password: "Email or password are incorrect",
          });
          setLoading(false);
          const errorCode = error.code;
          const errorMessage = error.message;
          console.log(errorCode, errorMessage);
        });
    } else {
      setError({
        email: "Email is required",
        password: "Password is required",
      });
    }
  };

  return (
    <View style={styles.container}>
      <ScrollView>
        <Image
          source={require("../../../../assets/banco.png")}
          resizeMode="contain" // Adapta la imagen al tamaño del contenedor
          style={styles.logo}
        />
        <Input
          placeholder="Email"
          keyboardType="email-address"
          autoCapitalize="none" // No capitaliza la primera letra
          containerStyle={styles.input}
          onChange={(event) => setEmail(event.nativeEvent.text)} // nativeEvent es la interacción del usuario con el input
          errorMessage={error.email}
          rightIcon={
            <Icon
              type="material-community"
              name="at"
              size={22}
              color="#FF0079"
            />
          }
        />
        <Input
          placeholder="Password"
          keyboardType="password"
          autoCapitalize="none"
          secureTextEntry={showPassword}
          rightIcon={
            <Icon
              type="material-community"
              name={showPassword ? "eye-off-outline" : "eye-outline"} // Si showPassword es true, muestra el icono de ojo abierto, si es false, muestra el icono de ojo cerrado
              iconStyle={
                showPassword ? { color: "#c2c2c2" } : { color: "#FF0079" }
              } // Si showPassword es true, muestra el icono de ojo cerrado en color gris, si es false, muestra el icono de ojo abierto en color rojo
              onPress={() => setShowPassword(!showPassword)} // Si showPassword es true, lo cambia a false, si es false, lo cambia a true
            />
          }
          containerStyle={styles.input}
          onChange={(event) => setPassword(event.nativeEvent.text)}
          errorMessage={error.password}
        />
        <Button
          title="Log in"
          icon={{
            name: "login",
            type: "material-community",
            size: 20,
            color: "white",
          }}
          buttonStyle={styles.btnLogin}
          containerStyle={styles.btnContainer}
          onPress={login}
        />
        <Text
          style={styles.createAccount}
          // Sends the user to the create account screen
          onPress={() => navigation.navigate("createUserStack")}
        >
          Don't have an account?{" "}
        </Text>
        <Loading show={loading} text="Logging in..." />
      </ScrollView>
      <View>
        <Text>Copyright Financer 2023</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    height: "100%",
    backgroundColor: "#fff",
    flex: 1,
    alignContent: "center",
    justifyContent: "center",
  },
  logo: {
    width: "100%",
    height: 150,
    marginTop: 16,
    marginBottom: 16,
  },
  input: {
    width: "100%",
    marginBottom: 10,
  },
  btnContainer: {
    width: "50%",
    marginBottom: 16,
    alignContent: "center",
    alignSelf: "center",
  },
  btnLogin: {
    backgroundColor: "#FF0079",
    borderRadius: 10,
    width: "100%",
  },
  createAccount: {
    alignSelf: "center",
    marginTop: 8,
    color: "#FF0079",
  },
});